def queensAttack(n, k, r_q, c_q, obstacles):
    directions = {
        "N": n - r_q,
        "S": r_q - 1,
        "E": n - c_q,
        "W": c_q - 1,
        "NE": min(n - r_q, n - c_q),
        "NW": min(n - r_q, c_q - 1),
        "SE": min(r_q - 1, n - c_q),
        "SW": min(r_q - 1, c_q - 1)
    }

    for r, c in obstacles:
        # North
        if c == c_q and r > r_q:
            directions["N"] = min(directions["N"], r - r_q - 1)
        # South
        elif c == c_q and r < r_q:
            directions["S"] = min(directions["S"], r_q - r - 1)
        # East
        elif r == r_q and c > c_q:
            directions["E"] = min(directions["E"], c - c_q - 1)
        # West
        elif r == r_q and c < c_q:
            directions["W"] = min(directions["W"], c_q - c - 1)
        # North-East
        elif r - r_q == c - c_q and r > r_q:
            directions["NE"] = min(directions["NE"], r - r_q - 1)
        # North-West
        elif r - r_q == c_q - c and r > r_q:
            directions["NW"] = min(directions["NW"], r - r_q - 1)
        # South-East
        elif r_q - r == c - c_q and r < r_q:
            directions["SE"] = min(directions["SE"], r_q - r - 1)
        # South-West
        elif r_q - r == c_q - c and r < r_q:
            directions["SW"] = min(directions["SW"], r_q - r - 1)

    return sum(directions.values())

# Main function to read input/output for the platform
if __name__ == '__main__':
    import sys
    n, k = map(int, sys.stdin.readline().split())
    r_q, c_q = map(int, sys.stdin.readline().split())

    obstacles = []
    for _ in range(k):
        r, c = map(int, sys.stdin.readline().split())
        obstacles.append((r, c))

    print(queensAttack(n, k, r_q, c_q, obstacles))
