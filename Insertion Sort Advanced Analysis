import math
import os
import random
import re
import sys

# --- Modified Merge Sort to count shifts ---
def merge_sort_count(arr):
    return merge_sort_helper(arr, 0, len(arr) - 1)

def merge_sort_helper(arr, left, right):
    if left >= right:
        return 0

    mid = (left + right) // 2
    count = merge_sort_helper(arr, left, mid)
    count += merge_sort_helper(arr, mid + 1, right)
    count += merge(arr, left, mid, right)

    return count

def merge(arr, left, mid, right):
    temp = []
    i = left
    j = mid + 1
    shifts = 0

    while i <= mid and j <= right:
        if arr[i] <= arr[j]:
            temp.append(arr[i])
            i += 1
        else:
            temp.append(arr[j])
            # Count how many elements are remaining in the left array
            shifts += (mid - i + 1)
            j += 1

    while i <= mid:
        temp.append(arr[i])
        i += 1

    while j <= right:
        temp.append(arr[j])
        j += 1

    for idx, val in enumerate(temp):
        arr[left + idx] = val

    return shifts

# --- Insertion Sort Shift Counter ---
def insertionSort(arr):
    return merge_sort_count(arr)

# --- Main Input/Output Logic ---
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    t = int(input().strip())

    for t_itr in range(t):
        n = int(input().strip())
        arr = list(map(int, input().rstrip().split()))
        result = insertionSort(arr)
        fptr.write(str(result) + '\n')

    fptr.close()
